implicit prg : CompiledPrg {
  String safe_class_name(<DBSymbol, AutoSymbol> id) = safe_block_class_names(id, !);

  [<DBSymbol, AutoSymbol> -> String] safe_block_class_names = [
    b.name -> {
      name = upper_camel_case(bare_id(b.name));
      name = name & "_" if is_reserved(name);
      return name;
    } : b <- prg.static_blocks | b <- prg.react_blocks
  ];
}


implicit prg : CompiledPrg, taken_names : [String] {
  String safe_class_name(DeclInterType inter_type, Bool retry, Maybe[Nat] unique_id) {
    name = default_name(inter_type, retry);
    name = take(name, 60);
    name = name & "_" & printed(value(unique_id)) if unique_id != nothing;
    while taken_names(name) or is_reserved(name) or safe_block_class_names(_, name)
      name = name & "_";
    return name;
  }


  String default_name(InterType, Bool retry) =
    bool              = "Bool",
    integer           = "Long",
    float             = "Double",
    string            = "String",
    date              = "Date",
    time              = "DateTime",
    symbol(s?)        = upper_camel_case(s),
    tuple(ts?)        = "(" & append((default_name(t, retry) : t <- ts), ", ") & ")",
    record(fs?)       = append((upper_camel_case(l) : l <- isort(keys(fs))), "_"),
    named(ts?)        = default_name(ts, retry),
    union(ts?)        = append((default_name(t, retry) : t <- isort(ts)), "_"),
    seq(t?)           = default_name(t, retry) & "_Seq",
    set(t?)           = default_name(t, retry) & "_Set",
    tagged(s?, t?)    = tagged_default_name(t, s, retry),
    generic           = "String";


  String tagged_default_name(InterType type, Symbol tag, Bool retry) {
    name = upper_camel_case(tag);
    if retry {
      suffix = match (type)
        tuple(ts?)  = append((default_name(t, retry) : t <- ts), "_"),
        _           = default_name(type, retry);
      name = name & "_" & suffix;
    }
    return name;
  }




  String default_name(BasicTypeSymbol, Bool) =
    type_symbol(s?)         = upper_camel_case(s),
    schema_type_symbol(s?)  = upper_camel_case(s),
    builtin_type_symbol()   = undefined;


  String default_name(ParTypeSymbol type_symb, Bool retry) {
    args_names = (
      if t != empty_type
        then default_name(interface_type(t, typedefs = prg.typedefs), retry)
        else "Void"
      : t <- type_symb.params
    );
    return default_name(type_symb.symbol, retry) & "_" & append(args_names, "_");
  }
}

////////////////////////////////////////////////////////////////////////////////

String safe_lower_camel_case(Symbol symb) = safe_lower_camel_case(symb, false);

String safe_lower_camel_case(Symbol symb, Bool keep_underscore) {
  name = lower_camel_case(symb);
  name = name & "_" if is_reserved(name);
  return name;
}


String safe_upper_camel_case(Symbol symb) = safe_upper_camel_case(symb, false);

String safe_upper_camel_case(Symbol symb, Bool keep_underscore) {
  name = upper_camel_case(symb);
  name = name & "_" if is_reserved(name);
  return name;
}

////////////////////////////////////////////////////////////////////////////////


Bool is_reserved(String id) {
  for p <- isort(standard_generated_class_prefixes) {
    len = length(p);
    if length(id) > length(p) {
      prefix = take(p, len);
      if prefix == p {
        rest = drop(p, len);
        return false if (ch <- chars(rest) : not is_digit(ch));
      }
    }
  }

  return in(id, keywords_and_literals) or
         in(id, runtime_classes) or
         in(id, standard_generated_classes);
}


[String] keywords_and_literals = [
  "abstract",
  "as",
  "base",
  "bool",
  "break",
  "byte",
  "case",
  "catch",
  "char",
  "checked",
  "class",
  "const",
  "continue",
  "decimal",
  "default",
  "delegate",
  "do",
  "double",
  "else",
  "enum",
  "event",
  "explicit",
  "extern",
  "false",
  "finally",
  "fixed",
  "float",
  "for",
  "foreach",
  "goto",
  "if",
  "implicit",
  "in",
  "int",
  "interface",
  "internal",
  "is",
  "lock",
  "long",
  "namespace",
  "new",
  "null",
  "object",
  "operator",
  "out",
  "override",
  "params",
  "private",
  "protected",
  "public",
  "readonly",
  "ref",
  "return",
  "sbyte",
  "sealed",
  "short",
  "sizeof",
  "stackalloc",
  "static",
  "string",
  "struct",
  "switch",
  "this",
  "throw",
  "true",
  "try",
  "typeof",
  "uint",
  "ulong",
  "unchecked",
  "unsafe",
  "ushort",
  "using",
  "using",
  "static",
  "virtual",
  "void",
  "volatile",
  "while"
];


[String] standard_generated_classes = [
  "Generated", ## NOT SURE ABOUT THIS ONE, BUT JUST IN CASE
  "Env",
  "Lambda"
];


[String] standard_generated_class_prefixes = [
  "Lambda",
  "ConstIntSeq"
];


[String] runtime_classes = [
  // No need to worry here, they're in a different namespace
];
